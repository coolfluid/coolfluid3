#include "common/Component.hpp"
namespace cf3 {
namespace common {
/*! @page introducing_components Introducing the %Component class
 @section _introduction Introduction
 The component object concept is the key of understanding COOLFluiD 3.
 A component is typically organized in a tree-like data structure similar to the file system on your computer.
 A component can contain multiple other components and is uniquely defined by its name and path in the tree.
 This concept is implemented in COOLFluiD 3 as a class Component in the cf3::common namespace.
 One can derive new component types adding more specific functionality to the Component class.
 A component can simply serve to store data, or group multiple components, or perform actions on other components, or combinations of these.
 
 @section _characteristics_of_components Characteristics of Components
 Components have so called tags assigned to them which are strings that further characterize the type or purpose of a component. This is similar to a file extension for files on your computer. Multiple tags can be assigned to one component. Tags are not modifiable or seen by end-users. They can only be changed by developers in the code.

 Components have properties or meta-data, which store usually small informational data. This data can serve to describe the component (e.g. 'usage'='time iterator' ) or actually hold functional data used in some way by the code (e.g. 'iteration'=4 ). Properties are publicly accessible through their name and can be used for dynamic variables.
 Properties can not be changed by the user, only by developers.

 Components have configuration options which are implemented as a special case of user modifiable properties. These configuration options can be changed
 by the user in an interactive environment or script, or hardcoded in COOLFluiD when another event is triggered. Configuration options are either basic or advanced, and have a name, a description and a default value.

 Components can receive and send so called signals, using xml language. Signals are translated into actions which are implemented by the component. For instance, a mesh reading component can receive the signal to start reading from a file and build the mesh, where the path to the file is specified inside the signal.

 The COOLFluID 3 Kernel is basically a collection of libraries of components that can be created on demand by users or developers, to build a whole data structure or application.

 @section _whats_there What's there?
 The cf3::common namespace contains apart from the Component base class, some specialized components:
 Link: This component contains a reference to another component in the tree, and accessing it, accesses this reference. It serves as an analogy to the symbolic link on the computer file system.
 Group: This component actually doesn't add more functionality, but serves as an analogy to the folder or directory on the computer file system. It is also used for the "/" or root directory in a unix type file system, which holds the Environment or Environment component for interaction with the Operating System.
 The cf3::Mesh namespace implements components that constitute to building, storing, and manipulating the mesh.
 
 <hr>
 @li Next: \ref using_components
 */

 //-----------------------------------------------------------

 /*! @page shared_ptr_and_handles Shared pointers and Handles
 
 
 @section _shared_ptr boost::shared_ptr<T>
 A boost::shared_ptr is a specialized pointer to the allocated object that keeps and shares ownership
 with other boost::shared_ptr's to the same object. The allocated object is deleted from memory only when all boost::shared_ptr's are
 deleted.
 
 Following snippet shows the advantages of boost::shared_ptr, used for the Component environment
 @code
 // Allocate a component and store it in a boost::shared_ptr "ptr1"
 boost::shared_ptr<ComponentType> ptr1 = common::allocate_component<ComponentType>("component_name");
 
 // Share ownership of the component with another boost::shared_ptr "ptr2"
 boost::shared_ptr<ComponentType> ptr2 = ptr1;

 // Reset ptr1, telling the boost::shared_ptr that it no longer shares ownership to the component.
 ptr1.reset();   // ptr1 gets deleted
 
 // ptr2 still has ownership of the component
 std::cout << ptr2->name() << std::endl; // print the name of the component
 @endcode
 More information on boost::shared_ptr can be found at <a href="http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm">boost::shared_ptr docs</a>.
 
 @section _handle Handle<T>
 
 The Handle class is a specialized pointer type, working together with boost::shared_ptr's.
 Handle's don't share ownership as boost::shared_ptr's do.
 Handle's have a mechanism to keep track if there are still
 boost::shared_ptr's sharing ownership. If all boost::shared_ptr's are deleted, the boost::weak_ptr will know this.
 
 A Handle can be created from any boost::shared_ptr or other handles:
 @code
 // Create a boost::shared_ptr
 boost::shared_ptr<ComponentType> component_shared_ptr = common::allocate_component<ComponentType>("component_name");

 // Create a handle from the boost::shared_ptr
 Handle<ComponentType> component_handle ( component_shared_ptr );

 // Create another handle using the first handle
 Handle<ComponentType> another_handle = component_handle;
 
 // Check if handles are valid
 is_not_null(component_handle) // returns true
 is_not_null(another_handle)   // returns true
 
 // Delete the allocated_component
 component_shared_ptr.reset()
 
 is_not_null(component_handle) // returns false
 is_not_null(another_handle)   // returns false
 @endcode
 
 When working with components it is generally advised to use Handles and not boost::shared_ptr's, as algorithms might
 keep objects in memory, even though the user specifically meant to delete a component from memory.
 
 @section _handle_mistake Common mistake
 Do not use Handle as the return type for functions returning a boost::shared_ptr!
 This shared_ptr will be deleted immediately, and thus delete the allocated object, without
 transferring ownership to the handle. This mistake will not be caught by compilers!
 
 */


//-----------------------------------------------------------
 /*! @page using_components Using Components

 @section _allocate Allocating a standalone component
 The most basic function to allocate a component is @b common::allocate_component<T>(). A component is always defined by a name.
 @code
 boost::shared_ptr<ComponentType> component_ptr = common::allocate_component<ComponentType>("component_name");
 @endcode
 The return value is a boost::shared_ptr, a specialized pointer to the allocated component that keeps and shares ownership.\n
 More information on boost::shared_ptr and why it is used can be found on the page \ref shared_ptr_and_handles.
 
 @note
 It is NOT ALLOWED to create a component the following way:
 @code
   ComponentType component("component_name");   // will not compile!
 @endcode
 This is not allowed because a boost::shared_ptr cannot be created from this object. 
 It is always necessary to use an allocation with a boost::shared_ptr.

\n

 @note \ref _handle_mistake! Don't use a Handle as the return type for the common::allocate_component<T>() function!!!
 @code
 Handle<ComponentType> component_handle = common::allocate_component<ComponentType>("component_name");  // wrong! (but will compile)
 @endcode
 
 @section _handling Handling components
  
 @subsection _add_move_remove Adding, Renaming, Moving and Removing a component
 
 If we want to nest a allocated component with name "component_name" in another existing component "parent_component", we can use the @b Component::add_component() function.
 We want to rename the component first to "my_name";
 @code
 boost::shared_ptr<ComponentType> component_ptr = common::allocate_component<ComponentType>("component_name");
 component_ptr->rename("my_name");
 ParentComponentType& parent_component = ... ;
 parent_component.add_component(component_ptr);
 @endcode
 This will add ownership of the allocated component stored in component_ptr to parent_component, so that when component_ptr gets deleted, the component still
 exists, nested in parent_component.
 It is possible to move a nested component from one parent to another:
 @code
 component_ptr->move_to(other_parent_component);
 @endcode
 It is also possible to remove a nested component (the reverse operation of @b Component::add_component() )
 @code
 component_ptr = other_parent_component.remove_component("my_name");
 @endcode
  
 @section _access Accessing a component

 @subsection _access_by_name Access through its name
 When the name of the desired component is known, use the Component member function @b Component::get_child()

 @code
 Handle<Component> child_component = parent_component.get_child("my_component");
 @endcode
 
 When the component needs to be cast to a known derived type (e.g. DerivedComponentType), use the Component member function Component::handle<T>()
 @code
 Handle<DerivedComponentType> child_component = parent_component.get_child("my_component")->handle<DerivedComponentType>();
 @endcode
 
 @subsection _access_by_path Access through its path
 When the path of the desired component is known, use the Component member function @b Component::access_component()
 Paths can be relative to the component, or global.

 @code
 Handle<Component> relative_component = current_component.access_component("../../my_component");
 Handle<Component> absolute_component = current_component.access_component("/absolute/path/to/my_component");
 @endcode
 
 When the component needs to be cast to a known derived type (e.g. DerivedComponentType), use the Component member function Component::handle<T>() again
 @code
 Handle<DerivedComponentType> relative_component = current_component.access_component("../../my_component")->handle<DerivedComponentType>();
 @endcode
 
 
 
 
 
 IMPORTANT: When to access a component?
 Accessing a component from the tree can be a costly operation and should be avoided in loops that need to be as efficient as possible.
 It is therefore highly recommended to access the desired component before the loop, and create a reference to it. Several ways are widely used:
 @code
 Component&        myComp_1 =  <function that returns the type "Component"> ;
 Handle<Component> myComp_2 =  <function that returns the type "Component">.handle<Component>() ;
 Component&        myComp_3 = *<function that returns the type "Handle<Component>" ;
 Handle<Component> myComp_4 =  <function that returns the type "Handle<Component>"> ;

 for (int i=0; i<1000; ++i)
 {
   // make use of myComp_1, myComp_2, myComp_3, myComp_4, myComp_5
   // without calling costly function that looks for a component
 }
 @endcode

 Notice the "&" sign, indicating that the component will not be copied, but referenced, so that the original, residing in the tree will be accessed.
 For myComp_2, a shared pointer of the Component type is created by calling the Component member function Component::self().
 For myComp_3, a dereferenced version is obtained by using the asterisk to dereference the Component::Ptr. 
 For myComp_5, a direct pointer is obtained from the shared_pointer by calling the boost::shared_ptr member function get().
 Care must be taken for myComp_3 and myComp_5, if the shared_ptr is created inside the function that returns it, and if that function doesn't store the component in the component tree, as the shared_ptr will not stay alive. In that case, the component will be invalid.
 
 
 
 
 Say you have a component "myComp" of type Component.
 To create a subcomponent of type Group with name "group1" inside myComp , use @b Component::create_component<T>() function:
 @code
 Handle<common::Group> myGroup = myComp->create_component<common::Group>("group1");
 @endcode
 @anchor using_build_component
 Say you want to create a component of the abstract type mesh::MeshReader, but with concrete implementation from a gmsh reader,
 use then the @b Component::build_component() function
 @code
 Handle<mesh::CMeshReader> mesh_reader = 
     myComp->build_component("meshreader","cf3.mesh.gmsh.Reader")->handle<mesh::MeshReader>();
 @endcode
 Here @c "cf3.mesh.gmsh.Reader" is the name of the concrete class cf3::mesh::gmsh::Reader
 The possibility of this last approach is that component creation can be configurable, as the concrete type can be passed as a string.
 
 
 
 @section _configure How to configure a component

 @subsection _config_using_code Using c++ code
 Say the component "myComp" has a configuration option "My Integer Number" which is of the type "integer", then the value of option "My Integer Number" can be modified or configured using the code:

 @code
 myComp.options().configure_option( "my_integer_number" , int(2) ); 
 @endcode
 
 It is important to statically cast the value to the type int. Similarly for another option "My Real Number" with value of type "real" , the code would have to be:
 @code
 myComp.options().configure_option( "my_real_number" , Real(2) );
 @endcode
 
 Accessing these properties occurs using the function property().
 @code
 int  my_integer = myComp.options().option("my_integer_number").value<int>();
 Real my_real    = myComp.options().option("my_real_number").value<Real>();
 @endcode
 Notice the @c value<int>() part in this code.
 
 
 @subsection _access_by_search Access through a search
 It is also possible to perform a search for components using predicates. What is returned from a search is a component iterator range. This is helpful as the iterator range can easily be used in a "boost_foreach" macro:
 @code
 boost_foreach (Component& component,  <search function returning iterator range>)
 {
   // do stuff with component
 }
 @endcode
 
 A search function can look in a component going only one level down, or recursively traverse the whole tree of child components and its child components etc.
 Say we have a component tree as follows with names:
 @verbatim
 root                      ( type = Root               ,  tags = )
     component1            ( type = Group              ,  tags = )
         subcomponent1     ( type = MyType             ,  tags = )
         subcomponent2     ( type = MyType             ,  tags = )
     component2            ( type = Group              ,  tags = special_tag )
         subcomponent1     ( type = MySpecializedType  ,  tags = )
         subcomponent2     ( type = MyType             ,  tags = special_tag )
 @endverbatim
 In the case we want to visit only the first level child components of root, use @b find_components() : 
 @code
 boost_foreach ( Component& component , find_components(root_component) )
 {
   // component will be in order:  component1, component2
 }
 @endcode
 
 Note the & since component is non-copyable, and accessing it will access the one in the tree.
 In the case we want to visit every component in the tree under root, use @b find_components_recursively() : 
 @code
 boost_foreach ( Component& component , find_components_recursively(root_component) )
 {
   // component will be in order:  component1, subcomponent1, subcomponent2, component2, subcomponent1, subcomponent2
 }
 @endcode
 
 There are ways to filter this range, by appending "_with_filter" , such as find_components_recursively_with_filter().
 The function then takes 2 arguments: first the component, and secondly a predicate.
 A predicate is a mini class with the operator () defined and returning true or false. Developers can create their own
 predicates to do advanced searches. Some built-in predicates exist such as "IsComponentName or IsComponentTag".

 All components with name "subcomponent1" :
 @code
 boost_foreach ( Component& component , find_components_with_filter(root_component , IsComponentName("subcomponent1") )
 {
   // component will be in order:  //component1/subcomponent1 , //component2/subcomponent1
 }
 @endcode
 
 All components with tag "special_tag" :
 @code
 boost_foreach ( Component& component , find_components_recursively_with_filter(root_component , IsComponentTag("special_tag") )
 {
   // component will be in order:  //component2 , //component2/subcomponent2
 }
 @endcode
 
 All components with tag "MyType" :
 @code
 boost_foreach ( Component& component , find_components_recursively_with_filter(root_component , IsComponentTag("MyType") )
 {
   // component will be in order:  
   //   component1/subcomponent1 , component1/subcomponent2 , component2/subcomponent1 , component2/subcomponent2
 }
 @endcode
 
 This last search is interesting as it allows to search by the type of the component.
 We would then of course like to use specialized functionality of that component, and it would have to be cast to the type we look for.
 To avoid this code, there is a templated-by-type version of every previously shown search function that automatically casts the component 
 to the type. All you have to do is add @<TYPE@> after the find function, where "TYPE" is the type of the component you look for.

 The last example could be rewritten to give all components of type MyType using @b find_components_recursively<MyType>() :
 @code
 boost_foreach ( MyType& component , find_components_recursively<MyType>(root_component) )
 {
   // component is now of type MyType and will be in order:  
   //   component1/subcomponent1 , component1/subcomponent2 , component2/subcomponent1 , component2/subcomponent2
 }
 @endcode
 Note that it is no longer necessary to use the "filtered" version, as this happens under the hood.
 It is still possible to filter on tags or names or other predicates.

 To get the components of type MyType with extra tag "special_tag", use @b find_components_recursively_with_tag<MyType>() :
 @code
 boost_foreach ( MyType& component , 
    find_components_recursively_with_tag<MyType>( root_component , IsComponentTag("special_tag") ) )
 {
   // component is now of type MyType , and will have the tag "special_tag", and will be in order:  
   //   component2/subcomponent2     and NOT component2 as it is not of the type MyType 
   //   although it also meets the IsComponentTag("special_tag") predicate
 }
 @endcode
 
 <hr>
 @li Next: \ref coding_components
*/

//-----------------------------------------------------------

/*! \page coding_components Coding your own Components

@section _when When to decide if your class should be a component?
When it is any or more of the following:
@li configurable
@li data you want stored and easily accessible from anywhere in the code
@li action

@section _coding_example Example
A new component always has to inherit from a parent class which is also a component.
A simple example is the class common::Group, which adds actually no extra functionality.

@code
namespace cf3 {
namespace common {

class Common_API Group : public Component 
{
public: // functions

  /// Get the class name
  static std::string type_name () { return "Group"; }

  /// Contructor
  /// @param name of the component
  Group ( const std::string& name ) : Component(name) {}

  /// Virtual destructor
  virtual ~Group() {}

};

} //namespace common
} //namespace cf3
@endcode

Noteworthy here is:
 - Group inherits from Component
 - The constructor of a Component takes only 1 std::string, i.e. the name the component gets
 - The component must have a @b static function Group::type_name() defined, returning the class name
 - Following the class name is first the API macro related to this namespace (here Common_API). 
   This macro is usually defined in the library of this namespace. (LibNamespace.hpp)

<hr>
@li Next: \ref understanding_options

*/


//-------------------------------------------------------------

/*! \page understanding_options Understanding options

Options offer a convinient way to manipulate data no matter its type is. Internally, the value is stored as a 
<a href="http://www.boost.org/doc/libs/release/doc/html/any.html">boost::any</a> object that theorically supports 
any type of value. In practice, template functions are defined in CPP files by using the explicit template 
declaration concept in order to optimize the compilation process. That is, only six types are supported by 
COOLFluiD options : @c bool, @c int, @c cf3::Uint, @c cf3::Real, @c std::string and @c common::URI. 
Trying to instanciate an option with another type will lead to a linking error (undefined reference).<br>

Options are defined by the class @c common::Option, which is an abstract class. A list of options can be 
easily managed by using the class @c common::OptionList. The Common library provides some classes for different 
purposes of use :

<ul>
 <li> @c common::OptionT : single value options. Cannot be used with URI.
 <li> @c common::OptionURI : options with type @c common::URI. These class can be seen as an implementation of 
@c OptionT<URI>. It allows to manage a list of supported protocols (see further for more information)
 <li> @c common::OptionComponent : options which point to components (configured using a Handle, or URI)
 <li> @c common::OptionArrayT : arrays of values. 
 <li> @c common::OptionEnum : acts as an @c OptionT<std::string> of which data is an enumeration. This class is not implemented yet.
</ul>

@section using_options Using options

Options provide the following information:

<ul>
 <li> a default value
 <li> a current value
 <li> a type as string
 <li> a restricted list of values
</ul>

When you build an option, default and current values are the same. The type is 

@section single_options Single value options

@section array_options Array options

@section options_and_components Options and components

@section options_triggers Triggers
*/

}
}
