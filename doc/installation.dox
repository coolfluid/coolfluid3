namespace cf3{
/**
@page installation Installing a developer version

@note This tutorial works only for Linux and Mac OS X command line <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">bash</a> environments.


@section _installation_register New Developers

The main development of coolfluid3 is hosted as a <a href=http://git-scm.com/>git</a> repository on <a href=https://github.com>github</a> .

Developers are required to create a github account at https://github.com and create a fork of their own version of coolfluid3 from
https://github.com/coolfluid/coolfluid3 .

Developers new to git or github should read github's excellent <a href=http://help.github.com/>help pages</a>.

You should now have your own repository of coolfluid3 at  https://github.com/your_name/coolfluid3 .

@section _installation_get_sources Get the sources

Make sure you have git installed, and configured for github as described <a href=http://help.github.com/set-up-git-redirect>here</a>.

Create a directory to hold your sources and the build files:

@verbatim
$> mkdir coolfluid3
$> cd coolfluid3
$> git clone git@github.com:your_name/coolfluid3.git kernel
@endverbatim

Lets remember this directory to help the rest of the installation:

@verbatim
$> export CF3=$PWD
@endverbatim

@section _installation_prerequisites Prerequisites

COOLFluiD 3 depends on several third-party libraries, to enable extra functionality. Of all the third-party libraries,
only 3 are absolutely necessary. These dependencies will allow coolfluid to build with minimum functionality, and several
disabled coolfluid libraries.

<ul>
 <li> <a href=http://www.cmake.org/> CMake </a> version 2.8.2 or higher.
 <li> <a href=http://www.boost.org/> Boost C++ Libraries </a>, offering a multitude of nice additions to C++.
 <ul>
  <li> Mandatory boost build options: @verbatim --with-test --with-thread --with-iostreams --with-filesystem --with-system --with-regex --with-date_time --with-program_options @endverbatim
  <li> Extra recommended boost build options:  @verbatim --with-python @endverbatim
 </ul>
 <li> <a href=http://www.open-mpi.org> open-mpi </a> or any other <a href=http://www.mcs.anl.gov/research/projects/mpi/>MPI</a> distribution.
</ul>

Besides creating C++ applications using the coolfluid libraries, coolfluid libraries can also be used in two additional ways.
It is therefore highly recommended to make sure following dependencies are also available:
<ul>
  <li> coolfluid-client user interface, based on <a href=http://qt.nokia.com>Nokia's Qt Libraries</a>, providing full client-server interaction.
  <ul>
    <li> The open source version of the Qt Libraries can be found <a href="http://qt.nokia.com/downloads/downloads#qt-lib">here</a>.
  </ul>
  <li> <a href=http://www.python.org/>Python</a> scripting.
  <ul>
    <li> Python must be available
    <li> boost must be compiled with Python support
  </ul>
</ul>

Other recommended third party libraries:
<ul>
  <li> Any of these parallel distributed mesh-partitioning libraries:
  <ul>
    <li> <a href=http://www.labri.fr/perso/pelegrin/scotch/>PTScotch</a>
    <li> <a href=http://www.cs.sandia.gov/Zoltan/>Zoltan</a> (also sub-package of Trilinos)
  </ul>
  <li> <a href=http://trilinos.sandia.gov/>Trilinos</a> for solving parallel distributed linear systems
  <li> <a href=http://cgns.sourceforge.net/>CGNS</a> to read and write meshes in cgns format
  <li> <a href=http://www.paraview.org/>Paraview</a> libraries compiled with MPI for use with the coolfluid-client user interface, to visualize meshes.
</ul>

Other supported third party libraries of little use at the moment:
<ul>
  <li> <a href=http://www.cgal.org/>CGAL</a> for geometry related algorithms and mesh triangulation
  <li> <a href=http://code.google.com/p/google-perftools/>google-perftools</a> to inspect performance
  <li> <a href=http://crd.lbl.gov/~xiaoye/SuperLU/>superlu</a> to solve linear systems (not parallel)
</ul>

@subsection _installation_install_deps Installation of dependencies
To make life easier for you, we provide a script with the coolfluid sources that downloads and installs the
required dependencies, but without any guarantee of success for your specific architecture!
It is also recommended to install the dependencies not in the system, but in your home directory where you have
all the access-privileges (e.g. on high-performance computing clusters).

@note
Qt must be installed beforehand, (not through the script). Source code as well as pre-compiled binaries
can be found <a href="http://qt.nokia.com/downloads/downloads#qt-lib">here</a>.

Continuing where we left off:
@verbatim
$> mkdir $CF3/deps
$> $CF3/kernel/tools/install-deps.pl --no-fortran --install-dir=$CF3/deps --install=recommended --no-fortran
@endverbatim
Please check $CF3/kernel/tools/install-deps.pl --help for all available options of this script
Use the option "--dry-run" to check what the script will do normally, without actually doing anything.\n
The "--install=recommended" argument is equivalent to "--install=cmake,boost,openmpi,parmetis,zoltan,trilinos,hdf5,cgns".
It is self-explanatory that you can choose to omit or add extra libraries to install.
The "--no-fortran" option is there because e.g. Mac OSX does not come with a Fortran compiler.

@subsection _installation_export_dependencies Export dependencies

Since the dependencies were not installed in the system directories but in $CF3/deps, we have to let the system know to look
for these dependencies there.

You might want to save this in your bash startup script (~/.bash_profile or ~/.bash_rc  -- create it if it doesn't exist)
@verbatim
$> export CF3=complete/path/to/coolfluid3    # notice to replace the complete path!
$> export PATH=$CF3/deps/bin:$PATH
$> export LD_LIBRARY_PATH=$CF3/deps/lib:$LD_LIBRARY_PATH
$> export DYLD_LIBRARY_PATH=$CF3/deps/lib:$DYLD_LIBRARY_PATH
@endverbatim

<hr>

@section _installation_build_coolfluid Build COOLFluiD

On this phase you will select your building options for cf3
Repeat this phase as often as you need and whenever you want to refresh your build directory.

@subsection _installation_create_a_build_directory_separate_from_the_sources Create a build directory separate from the sources

@verbatim
$> cd $CF3
$> mkdir build
@endverbatim

@subsection _installation_configure_the_build_with_your_options Configure the build with your options

Unlike COOLFluiD 2, there is no prepare.pl script. The developer must now call CMake directly.
CMake is a cross platform configuration/build system. The developer is advised to read the <a href="http://www.cmake.org/cmake/help/documentation.html">CMake documentation</a> for advanced configuration.
@verbatim
$> cd $CF3/build
$> cmake -DDEPS_ROOT=$CF3/deps    $CF3/kernel
@endverbatim

@subsubsection _installation_build_type_options Build type options

By default CF builds with some optimization and with debug symbols. 
This is equivalent to passing the option "-DCMAKE_BUILD_TYPE=RelWithDebInfo".
Available build types are:

@verbatim
-DCMAKE_BUILD_TYPE=RelWithDebInfo
-DCMAKE_BUILD_TYPE=Release (no debug symbols)
-DCMAKE_BUILD_TYPE=Debug (no optimization)
@endverbatim

@subsubsection _installation_some_more_configuration_options Some more configuration options

To force a specific compiler:
@verbatim
-DCMAKE_C_COMPILER=$CF3/deps/bin/mpicc
-DCMAKE_CXX_COMPILER=$CF3/deps/bin/mpicxx
@endverbatim
If CMake cannot find the MPI environment:
@verbatim
-DMPI_C_COMPILER=$CF3/deps/bin/mpicc
-DMPI_CXX_COMPILER=$CF3/deps/bin/mpicxx
@endverbatim
A few other options that can be used:
@verbatim
-DCF3_CXX_FLAGS="-march=Core2"       # Architecture optimization for Core2
-DCF3_SKIP_FORTRAN=ON                # When you don't need or don't have Fortran installed
-DCF3_ENABLE_WARNINGS=OFF            # For users that don't want to see all the warnings
-DCF3_ENABLE_GUI=OFF                 # When the gui is not to be built
@endverbatim

@subsubsection _installation_customizing_configuration_further Customizing configuration further

Calling the command
@verbatim
$> cd $CF3/build
$> ccmake ./
@endverbatim
This will show the interactive CMake configuration, where all available options are visible and can be changed. 
Press 'c' to configure, and afterwards 'g' to generate the build files.

@subsection _installation_compiling_coolfluid Compiling COOLFluiD

By default, the CMake configuration generates <a href="http://en.wikipedia.org/wiki/Make_(software)">makefiles</a> to compile %COOLFluiD. This is used by
@verbatim
$> cd $CF3/build
$> make -j2
@endverbatim
with the @c "-j2" assigning 2 processes to the compilation (e.g. for dual core)

@subsection _installation_xcode_builds Xcode builds (MacOS X)

Alternately the CMake argument @c -G"Xcode" can be used:
@verbatim
$> cd $CF3/build
$> cmake -DDEPS_ROOT=$CF3/deps -G"Xcode"  $CF3/kernel
@endverbatim 
This will generate an <a href="http://developer.apple.com/xcode/">Xcode</a> project instead of  makefiles. Xcode comes with a debugger and other nice features to help developers.
@note Xcode version 4 is found to be nearly unusable due to high memory requirements at the "indexing" stage, version 3 is recommended.

<hr>

@section _installation_running_coolfluid_tests Running COOLFluiD tests

Coolfluid has many unit tests and acceptance tests. Unit tests are small executables that run each a maximum of 1 to 2 seconds, and test various classes and functions of coolfluid. They serve also as mini-manuals and examples of how to use coolfluid.
Acceptance tests are typically more full simulations that take a longer time to finish. They are typically made in the form of a script that gets executed by a coolfluid command-line interpreter @ref coolfluid-command.

To compile the tests, the developer has to make sure that the flags @c "-DCF3_ENABLE_UNIT_TESTS" and @c "-DCF3_ENABLE_ACCEPTANCE_TESTS" are passed to the CMake configuration. (They are on by default, but can be changed using @c "ccmake")
To run the tests:
@verbatim
$> cd $CF3/build
$> ctest
@endverbatim 
Individual tests can be selected. The developer is referred to the <a href="http://www.cmake.org/cmake/help/ctest-2-8-docs.html">CTest documentation</a>.

*/
}